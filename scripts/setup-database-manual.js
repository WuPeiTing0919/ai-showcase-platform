const mysql = require('mysql2/promise');

// Ë≥áÊñôÂ∫´ÈÖçÁΩÆ
const dbConfig = {
  host: process.env.DB_HOST || 'mysql.theaken.com',
  port: parseInt(process.env.DB_PORT || '33306'),
  user: process.env.DB_USER || 'AI_Platform',
  password: process.env.DB_PASSWORD || 'Aa123456',
  database: process.env.DB_NAME || 'db_AI_Platform',
  charset: 'utf8mb4',
  timezone: '+08:00'
};

async function setupDatabase() {
  let connection;
  
  try {
    console.log('üöÄ ÈñãÂßãÂª∫Á´ãAIÂ±ïÁ§∫Âπ≥Âè∞Ë≥áÊñôÂ∫´...');
    console.log('‚îÄ'.repeat(50));
    
    // 1. ÈÄ£Êé•Ë≥áÊñôÂ∫´
    console.log('üîå ÈÄ£Êé•Ë≥áÊñôÂ∫´...');
    connection = await mysql.createConnection({
      ...dbConfig,
      database: undefined
    });
    
    // 2. Ê™¢Êü•Ë≥áÊñôÂ∫´ÊòØÂê¶Â≠òÂú®
    const [databases] = await connection.query('SHOW DATABASES');
    const dbExists = databases.some(db => db.Database === dbConfig.database);
    
    if (!dbExists) {
      console.log(`üìä Âª∫Á´ãË≥áÊñôÂ∫´: ${dbConfig.database}`);
      await connection.query(`CREATE DATABASE ${dbConfig.database} CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci`);
    } else {
      console.log(`‚úÖ Ë≥áÊñôÂ∫´Â∑≤Â≠òÂú®: ${dbConfig.database}`);
    }
    
    // 3. ÂàáÊèõÂà∞ÁõÆÊ®ôË≥áÊñôÂ∫´
    await connection.query(`USE ${dbConfig.database}`);
    
    // 4. ÊâãÂãïÂü∑Ë°åSQLË™ûÂè•
    console.log('üìù Âü∑Ë°åË≥áÊñôÂ∫´Âª∫Á´ãËÖ≥Êú¨...');
    
    const sqlStatements = [
      // 1. Áî®Êà∂Ë°®
      `CREATE TABLE IF NOT EXISTS users (
        id VARCHAR(36) PRIMARY KEY,
        name VARCHAR(100) NOT NULL,
        email VARCHAR(255) UNIQUE NOT NULL,
        password_hash VARCHAR(255) NOT NULL,
        avatar VARCHAR(500),
        department VARCHAR(100) NOT NULL,
        role ENUM('user', 'developer', 'admin') DEFAULT 'user',
        join_date DATE NOT NULL,
        total_likes INT DEFAULT 0,
        total_views INT DEFAULT 0,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
        INDEX idx_email (email),
        INDEX idx_department (department),
        INDEX idx_role (role)
      )`,
      
      // 2. Á´∂Ë≥ΩË°®
      `CREATE TABLE IF NOT EXISTS competitions (
        id VARCHAR(36) PRIMARY KEY,
        name VARCHAR(200) NOT NULL,
        year INT NOT NULL,
        month INT NOT NULL,
        start_date DATE NOT NULL,
        end_date DATE NOT NULL,
        status ENUM('upcoming', 'active', 'judging', 'completed') DEFAULT 'upcoming',
        description TEXT,
        type ENUM('individual', 'team', 'mixed', 'proposal') NOT NULL,
        evaluation_focus TEXT,
        max_team_size INT,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
        INDEX idx_status (status),
        INDEX idx_type (type),
        INDEX idx_year_month (year, month),
        INDEX idx_dates (start_date, end_date)
      )`,
      
      // 3. Ë©ïÂØ©Ë°®
      `CREATE TABLE IF NOT EXISTS judges (
        id VARCHAR(36) PRIMARY KEY,
        name VARCHAR(100) NOT NULL,
        title VARCHAR(100) NOT NULL,
        department VARCHAR(100) NOT NULL,
        expertise JSON,
        avatar VARCHAR(500),
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
        INDEX idx_department (department)
      )`,
      
      // 4. ÂúòÈöäË°®
      `CREATE TABLE IF NOT EXISTS teams (
        id VARCHAR(36) PRIMARY KEY,
        name VARCHAR(200) NOT NULL,
        leader_id VARCHAR(36) NOT NULL,
        department VARCHAR(100) NOT NULL,
        contact_email VARCHAR(255) NOT NULL,
        total_likes INT DEFAULT 0,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
        FOREIGN KEY (leader_id) REFERENCES users(id) ON DELETE CASCADE,
        INDEX idx_department (department),
        INDEX idx_leader (leader_id)
      )`,
      
      // 5. ÂúòÈöäÊàêÂì°Ë°®
      `CREATE TABLE IF NOT EXISTS team_members (
        id VARCHAR(36) PRIMARY KEY,
        team_id VARCHAR(36) NOT NULL,
        user_id VARCHAR(36) NOT NULL,
        role VARCHAR(50) NOT NULL,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (team_id) REFERENCES teams(id) ON DELETE CASCADE,
        FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
        UNIQUE KEY unique_team_user (team_id, user_id),
        INDEX idx_team (team_id),
        INDEX idx_user (user_id)
      )`,
      
      // 6. ÊáâÁî®Ë°®
      `CREATE TABLE IF NOT EXISTS apps (
        id VARCHAR(36) PRIMARY KEY,
        name VARCHAR(200) NOT NULL,
        description TEXT,
        creator_id VARCHAR(36) NOT NULL,
        team_id VARCHAR(36),
        likes_count INT DEFAULT 0,
        views_count INT DEFAULT 0,
        rating DECIMAL(3,2) DEFAULT 0,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
        FOREIGN KEY (creator_id) REFERENCES users(id) ON DELETE CASCADE,
        FOREIGN KEY (team_id) REFERENCES teams(id) ON DELETE SET NULL,
        INDEX idx_creator (creator_id),
        INDEX idx_team (team_id),
        INDEX idx_rating (rating),
        INDEX idx_likes (likes_count)
      )`,
      
      // 7. ÊèêÊ°àË°®
      `CREATE TABLE IF NOT EXISTS proposals (
        id VARCHAR(36) PRIMARY KEY,
        title VARCHAR(200) NOT NULL,
        description TEXT,
        creator_id VARCHAR(36) NOT NULL,
        team_id VARCHAR(36),
        status ENUM('draft', 'submitted', 'under_review', 'approved', 'rejected') DEFAULT 'draft',
        likes_count INT DEFAULT 0,
        views_count INT DEFAULT 0,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
        FOREIGN KEY (creator_id) REFERENCES users(id) ON DELETE CASCADE,
        FOREIGN KEY (team_id) REFERENCES teams(id) ON DELETE SET NULL,
        INDEX idx_creator (creator_id),
        INDEX idx_status (status)
      )`,
      
      // 8. Ë©ïÂàÜË°®
      `CREATE TABLE IF NOT EXISTS judge_scores (
        id VARCHAR(36) PRIMARY KEY,
        judge_id VARCHAR(36) NOT NULL,
        app_id VARCHAR(36),
        proposal_id VARCHAR(36),
        scores JSON NOT NULL,
        comments TEXT,
        submitted_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (judge_id) REFERENCES judges(id) ON DELETE CASCADE,
        FOREIGN KEY (app_id) REFERENCES apps(id) ON DELETE CASCADE,
        FOREIGN KEY (proposal_id) REFERENCES proposals(id) ON DELETE CASCADE,
        UNIQUE KEY unique_judge_app (judge_id, app_id),
        UNIQUE KEY unique_judge_proposal (judge_id, proposal_id),
        INDEX idx_judge (judge_id),
        INDEX idx_app (app_id),
        INDEX idx_proposal (proposal_id)
      )`,
      
      // 9. ÁçéÈ†ÖË°®
      `CREATE TABLE IF NOT EXISTS awards (
        id VARCHAR(36) PRIMARY KEY,
        competition_id VARCHAR(36) NOT NULL,
        app_id VARCHAR(36),
        team_id VARCHAR(36),
        proposal_id VARCHAR(36),
        award_type ENUM('gold', 'silver', 'bronze', 'popular', 'innovation', 'technical', 'custom') NOT NULL,
        award_name VARCHAR(200) NOT NULL,
        score DECIMAL(5,2) NOT NULL,
        year INT NOT NULL,
        month INT NOT NULL,
        icon VARCHAR(50),
        custom_award_type_id VARCHAR(36),
        competition_type ENUM('individual', 'team', 'proposal') NOT NULL,
        rank INT DEFAULT 0,
        category ENUM('innovation', 'technical', 'practical', 'popular', 'teamwork', 'solution', 'creativity') NOT NULL,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (competition_id) REFERENCES competitions(id) ON DELETE CASCADE,
        FOREIGN KEY (app_id) REFERENCES apps(id) ON DELETE SET NULL,
        FOREIGN KEY (team_id) REFERENCES teams(id) ON DELETE SET NULL,
        FOREIGN KEY (proposal_id) REFERENCES proposals(id) ON DELETE SET NULL,
        INDEX idx_competition (competition_id),
        INDEX idx_award_type (award_type),
        INDEX idx_year_month (year, month),
        INDEX idx_category (category)
      )`,
      
      // 10. ËÅäÂ§©ÊúÉË©±Ë°®
      `CREATE TABLE IF NOT EXISTS chat_sessions (
        id VARCHAR(36) PRIMARY KEY,
        user_id VARCHAR(36) NOT NULL,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
        FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
        INDEX idx_user (user_id),
        INDEX idx_created (created_at)
      )`,
      
      // 11. ËÅäÂ§©Ë®äÊÅØË°®
      `CREATE TABLE IF NOT EXISTS chat_messages (
        id VARCHAR(36) PRIMARY KEY,
        session_id VARCHAR(36) NOT NULL,
        text TEXT NOT NULL,
        sender ENUM('user', 'bot') NOT NULL,
        quick_questions JSON,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (session_id) REFERENCES chat_sessions(id) ON DELETE CASCADE,
        INDEX idx_session (session_id),
        INDEX idx_created (created_at)
      )`,
      
      // 12. AIÂä©ÊâãÈÖçÁΩÆË°®
      `CREATE TABLE IF NOT EXISTS ai_assistant_configs (
        id VARCHAR(36) PRIMARY KEY,
        api_key VARCHAR(255) NOT NULL,
        api_url VARCHAR(500) NOT NULL,
        model VARCHAR(100) NOT NULL,
        max_tokens INT DEFAULT 200,
        temperature DECIMAL(3,2) DEFAULT 0.7,
        system_prompt TEXT NOT NULL,
        is_active BOOLEAN DEFAULT TRUE,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
        INDEX idx_active (is_active)
      )`,
      
      // 13. Áî®Êà∂Êî∂ËóèË°®
      `CREATE TABLE IF NOT EXISTS user_favorites (
        id VARCHAR(36) PRIMARY KEY,
        user_id VARCHAR(36) NOT NULL,
        app_id VARCHAR(36),
        proposal_id VARCHAR(36),
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
        FOREIGN KEY (app_id) REFERENCES apps(id) ON DELETE CASCADE,
        FOREIGN KEY (proposal_id) REFERENCES proposals(id) ON DELETE CASCADE,
        UNIQUE KEY unique_user_app (user_id, app_id),
        UNIQUE KEY unique_user_proposal (user_id, proposal_id),
        INDEX idx_user (user_id)
      )`,
      
      // 14. Áî®Êà∂ÊåâËÆöË°®
      `CREATE TABLE IF NOT EXISTS user_likes (
        id VARCHAR(36) PRIMARY KEY,
        user_id VARCHAR(36) NOT NULL,
        app_id VARCHAR(36),
        proposal_id VARCHAR(36),
        liked_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
        FOREIGN KEY (app_id) REFERENCES apps(id) ON DELETE CASCADE,
        FOREIGN KEY (proposal_id) REFERENCES proposals(id) ON DELETE CASCADE,
        UNIQUE KEY unique_user_app_date (user_id, app_id, DATE(liked_at)),
        UNIQUE KEY unique_user_proposal_date (user_id, proposal_id, DATE(liked_at)),
        INDEX idx_user (user_id),
        INDEX idx_app (app_id),
        INDEX idx_proposal (proposal_id),
        INDEX idx_date (liked_at)
      )`,
      
      // 15. Á´∂Ë≥ΩÂèÉËàáË°®
      `CREATE TABLE IF NOT EXISTS competition_participants (
        id VARCHAR(36) PRIMARY KEY,
        competition_id VARCHAR(36) NOT NULL,
        user_id VARCHAR(36),
        team_id VARCHAR(36),
        app_id VARCHAR(36),
        proposal_id VARCHAR(36),
        status ENUM('registered', 'submitted', 'approved', 'rejected') DEFAULT 'registered',
        registered_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (competition_id) REFERENCES competitions(id) ON DELETE CASCADE,
        FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
        FOREIGN KEY (team_id) REFERENCES teams(id) ON DELETE CASCADE,
        FOREIGN KEY (app_id) REFERENCES apps(id) ON DELETE CASCADE,
        FOREIGN KEY (proposal_id) REFERENCES proposals(id) ON DELETE CASCADE,
        INDEX idx_competition (competition_id),
        INDEX idx_user (user_id),
        INDEX idx_team (team_id),
        INDEX idx_status (status)
      )`,
      
      // 16. Á´∂Ë≥ΩË©ïÂØ©ÂàÜÈÖçË°®
      `CREATE TABLE IF NOT EXISTS competition_judges (
        id VARCHAR(36) PRIMARY KEY,
        competition_id VARCHAR(36) NOT NULL,
        judge_id VARCHAR(36) NOT NULL,
        assigned_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (competition_id) REFERENCES competitions(id) ON DELETE CASCADE,
        FOREIGN KEY (judge_id) REFERENCES judges(id) ON DELETE CASCADE,
        UNIQUE KEY unique_competition_judge (competition_id, judge_id),
        INDEX idx_competition (competition_id),
        INDEX idx_judge (judge_id)
      )`,
      
      // 17. Á≥ªÁµ±Ë®≠ÂÆöË°®
      `CREATE TABLE IF NOT EXISTS system_settings (
        id VARCHAR(36) PRIMARY KEY,
        setting_key VARCHAR(100) UNIQUE NOT NULL,
        setting_value TEXT,
        description TEXT,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
        INDEX idx_key (setting_key)
      )`,
      
      // 18. Ê¥ªÂãïÊó•Ë™åË°®
      `CREATE TABLE IF NOT EXISTS activity_logs (
        id VARCHAR(36) PRIMARY KEY,
        user_id VARCHAR(36),
        action VARCHAR(100) NOT NULL,
        target_type ENUM('user', 'competition', 'app', 'proposal', 'team', 'award') NOT NULL,
        target_id VARCHAR(36),
        details JSON,
        ip_address VARCHAR(45),
        user_agent TEXT,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE SET NULL,
        INDEX idx_user (user_id),
        INDEX idx_action (action),
        INDEX idx_target (target_type, target_id),
        INDEX idx_created (created_at)
      )`
    ];
    
    console.log(`üìã Ê∫ñÂÇôÂü∑Ë°å ${sqlStatements.length} ÂÄãSQLË™ûÂè•`);
    
    for (let i = 0; i < sqlStatements.length; i++) {
      const statement = sqlStatements[i];
      try {
        console.log(`Âü∑Ë°åË™ûÂè• ${i + 1}/${sqlStatements.length}: ${statement.substring(0, 50)}...`);
        await connection.query(statement);
      } catch (error) {
        console.error(`SQLÂü∑Ë°åÈåØË™§ (Ë™ûÂè• ${i + 1}):`, error.message);
      }
    }
    
    // 5. ÊèíÂÖ•ÂàùÂßãÊï∏Êìö
    console.log('\nüìù ÊèíÂÖ•ÂàùÂßãÊï∏Êìö...');
    
    const insertStatements = [
      // ÊèíÂÖ•È†êË®≠ÁÆ°ÁêÜÂì°Áî®Êà∂
      `INSERT IGNORE INTO users (id, name, email, password_hash, department, role, join_date) VALUES
       ('admin-001', 'Á≥ªÁµ±ÁÆ°ÁêÜÂì°', 'admin@theaken.com', '$2b$10$rQZ8K9mN2pL1vX3yU7wE4tA6sB8cD1eF2gH3iJ4kL5mN6oP7qR8sT9uV0wX1yZ2a', 'Ë≥áË®äÈÉ®', 'admin', '2025-01-01')`,
      
      // ÊèíÂÖ•È†êË®≠Ë©ïÂØ©
      `INSERT IGNORE INTO judges (id, name, title, department, expertise) VALUES
       ('judge-001', 'ÂºµÊïôÊéà', 'Ë≥áÊ∑±ÊäÄË°ìÈ°ßÂïè', 'Á†îÁôºÈÉ®', '["AI", "Ê©üÂô®Â≠∏Áøí", "Ê∑±Â∫¶Â≠∏Áøí"]'),
       ('judge-002', 'ÊùéÁ∂ìÁêÜ', 'Áî¢ÂìÅÁ∂ìÁêÜ', 'Áî¢ÂìÅÈÉ®', '["Áî¢ÂìÅË®≠Ë®à", "Áî®Êà∂È´îÈ©ó", "Â∏ÇÂ†¥ÂàÜÊûê"]'),
       ('judge-003', 'ÁéãÂ∑•Á®ãÂ∏´', 'Ë≥áÊ∑±Â∑•Á®ãÂ∏´', 'ÊäÄË°ìÈÉ®', '["ËªüÈ´îÈñãÁôº", "Á≥ªÁµ±Êû∂Êßã", "Èõ≤Á´ØÊäÄË°ì"]')`,
      
      // ÊèíÂÖ•È†êË®≠Á´∂Ë≥Ω
      `INSERT IGNORE INTO competitions (id, name, year, month, start_date, end_date, status, description, type, evaluation_focus, max_team_size) VALUES
       ('comp-2025-01', '2025Âπ¥AIÂâµÊñ∞Á´∂Ë≥Ω', 2025, 1, '2025-01-15', '2025-03-15', 'upcoming', 'Âπ¥Â∫¶AIÊäÄË°ìÂâµÊñ∞Á´∂Ë≥ΩÔºåÈºìÂãµÂì°Â∑•ÈñãÁôºÂâµÊñ∞AIÊáâÁî®', 'mixed', 'ÂâµÊñ∞ÊÄß„ÄÅÊäÄË°ìÂØ¶Áèæ„ÄÅÂØ¶Áî®ÂÉπÂÄº', 5),
       ('comp-2025-02', '2025Âπ¥ÊèêÊ°àÁ´∂Ë≥Ω', 2025, 2, '2025-02-01', '2025-04-01', 'upcoming', 'AIËß£Ê±∫ÊñπÊ°àÊèêÊ°àÁ´∂Ë≥Ω', 'proposal', 'Ëß£Ê±∫ÊñπÊ°àÂèØË°åÊÄß„ÄÅÂâµÊñ∞Á®ãÂ∫¶„ÄÅÂïÜÊ•≠ÂÉπÂÄº', NULL)`,
      
      // ÊèíÂÖ•AIÂä©ÊâãÈÖçÁΩÆ
      `INSERT IGNORE INTO ai_assistant_configs (id, api_key, api_url, model, max_tokens, temperature, system_prompt, is_active) VALUES
       ('ai-config-001', 'your_deepseek_api_key_here', 'https://api.deepseek.com/v1/chat/completions', 'deepseek-chat', 200, 0.7, '‰Ω†ÊòØ‰∏ÄÂÄãAIÂ±ïÁ§∫Âπ≥Âè∞ÁöÑÊô∫ËÉΩÂä©ÊâãÔºåÂ∞àÈñÄÂçîÂä©Áî®Êà∂‰ΩøÁî®Âπ≥Âè∞ÂäüËÉΩ„ÄÇË´ãÁî®ÂèãÂñÑ„ÄÅÂ∞àÊ•≠ÁöÑÊÖãÂ∫¶ÂõûÁ≠îÂïèÈ°å„ÄÇ', TRUE)`,
      
      // ÊèíÂÖ•Á≥ªÁµ±Ë®≠ÂÆö
      `INSERT IGNORE INTO system_settings (setting_key, setting_value, description) VALUES
       ('daily_like_limit', '5', 'Áî®Êà∂ÊØèÊó•ÊåâËÆöÈôêÂà∂'),
       ('max_team_size', '5', 'ÊúÄÂ§ßÂúòÈöä‰∫∫Êï∏'),
       ('competition_registration_deadline', '7', 'Á´∂Ë≥ΩÂ†±ÂêçÊà™Ê≠¢Â§©Êï∏'),
       ('judge_score_weight_innovation', '25', 'ÂâµÊñ∞ÊÄßË©ïÂàÜÊ¨äÈáç'),
       ('judge_score_weight_technical', '25', 'ÊäÄË°ìÊÄßË©ïÂàÜÊ¨äÈáç'),
       ('judge_score_weight_usability', '20', 'ÂØ¶Áî®ÊÄßË©ïÂàÜÊ¨äÈáç'),
       ('judge_score_weight_presentation', '15', 'Â±ïÁ§∫ÊïàÊûúË©ïÂàÜÊ¨äÈáç'),
       ('judge_score_weight_impact', '15', 'ÂΩ±ÈüøÂäõË©ïÂàÜÊ¨äÈáç')`
    ];
    
    for (let i = 0; i < insertStatements.length; i++) {
      const statement = insertStatements[i];
      try {
        console.log(`ÊèíÂÖ•Êï∏Êìö ${i + 1}/${insertStatements.length}...`);
        await connection.query(statement);
      } catch (error) {
        console.error(`ÊèíÂÖ•Êï∏ÊìöÈåØË™§ (Ë™ûÂè• ${i + 1}):`, error.message);
      }
    }
    
    console.log('‚úÖ Ë≥áÊñôÂ∫´Âª∫Á´ãÂÆåÊàê!');
    
    // 6. È©óË≠âÂª∫Á´ãÁµêÊûú
    console.log('\nüìã È©óË≠âË≥áÊñôÂ∫´ÁµêÊßã...');
    
    // Ê™¢Êü•Ë≥áÊñôË°®
    const [tables] = await connection.query(`
      SELECT TABLE_NAME, TABLE_ROWS 
      FROM information_schema.tables 
      WHERE table_schema = '${dbConfig.database}'
      ORDER BY TABLE_NAME
    `);
    
    console.log('\nüìä Ë≥áÊñôË°®ÂàóË°®:');
    console.log('‚îÄ'.repeat(60));
    console.log('Ë°®Âêç'.padEnd(25) + '| Ë®òÈåÑÊï∏'.padEnd(10) + '| ÁãÄÊÖã');
    console.log('‚îÄ'.repeat(60));
    
    const expectedTables = [
      'users', 'competitions', 'judges', 'teams', 'team_members',
      'apps', 'proposals', 'judge_scores', 'awards', 'chat_sessions',
      'chat_messages', 'ai_assistant_configs', 'user_favorites',
      'user_likes', 'competition_participants', 'competition_judges',
      'system_settings', 'activity_logs'
    ];
    
    let successCount = 0;
    for (const expectedTable of expectedTables) {
      const table = tables.find(t => t.TABLE_NAME === expectedTable);
      const status = table ? '‚úÖ' : '‚ùå';
      const rowCount = table ? (table.TABLE_ROWS || 0) : 'N/A';
      console.log(`${expectedTable.padEnd(25)}| ${rowCount.toString().padEnd(10)}| ${status}`);
      if (table) successCount++;
    }
    
    console.log(`\nüìä ÊàêÂäüÂª∫Á´ã ${successCount}/${expectedTables.length} ÂÄãË≥áÊñôË°®`);
    
    // Ê™¢Êü•ÂàùÂßãÊï∏Êìö
    console.log('\nüìä ÂàùÂßãÊï∏ÊìöÊ™¢Êü•:');
    console.log('‚îÄ'.repeat(40));
    
    const checks = [
      { name: 'ÁÆ°ÁêÜÂì°Áî®Êà∂', query: 'SELECT COUNT(*) as count FROM users WHERE role = "admin"' },
      { name: 'È†êË®≠Ë©ïÂØ©', query: 'SELECT COUNT(*) as count FROM judges' },
      { name: 'È†êË®≠Á´∂Ë≥Ω', query: 'SELECT COUNT(*) as count FROM competitions' },
      { name: 'AIÈÖçÁΩÆ', query: 'SELECT COUNT(*) as count FROM ai_assistant_configs' },
      { name: 'Á≥ªÁµ±Ë®≠ÂÆö', query: 'SELECT COUNT(*) as count FROM system_settings' }
    ];
    
    for (const check of checks) {
      try {
        const [result] = await connection.query(check.query);
        console.log(`${check.name.padEnd(15)}: ${result[0].count} Á≠Ü`);
      } catch (error) {
        console.log(`${check.name.padEnd(15)}: Êü•Ë©¢Â§±Êïó - ${error.message}`);
      }
    }
    
    console.log('\nüéâ Ë≥áÊñôÂ∫´Âª∫Á´ãÂíåÈ©óË≠âÂÆåÊàê!');
    console.log('\nüìù ‰∏ã‰∏ÄÊ≠•:');
    console.log('1. Ë§áË£Ω env.example Âà∞ .env.local');
    console.log('2. Ë®≠ÂÆöÁí∞Â¢ÉËÆäÊï∏');
    console.log('3. ÂÆâË£ù‰æùË≥¥: pnpm install');
    console.log('4. ÂïüÂãïÈñãÁôºÊúçÂãôÂô®: pnpm dev');
    
  } catch (error) {
    console.error('‚ùå Ë≥áÊñôÂ∫´Âª∫Á´ãÂ§±Êïó:', error.message);
    console.error('Ë´ãÊ™¢Êü•‰ª•‰∏ãÈ†ÖÁõÆ:');
    console.error('1. Ë≥áÊñôÂ∫´‰∏ªÊ©üÊòØÂê¶ÂèØÈÅî');
    console.error('2. Áî®Êà∂ÂêçÂíåÂØÜÁ¢ºÊòØÂê¶Ê≠£Á¢∫');
    console.error('3. Áî®Êà∂ÊòØÂê¶ÊúâÂª∫Á´ãË≥áÊñôÂ∫´ÁöÑÊ¨äÈôê');
    process.exit(1);
  } finally {
    if (connection) {
      await connection.end();
      console.log('\nüîå Ë≥áÊñôÂ∫´ÈÄ£Êé•Â∑≤ÈóúÈñâ');
    }
  }
}

// Âü∑Ë°åÂª∫Á´ãËÖ≥Êú¨
if (require.main === module) {
  setupDatabase();
}

module.exports = { setupDatabase }; 